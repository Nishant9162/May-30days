Leetcode-15
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

using HashSet 

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        int n= nums.length;
        List<List<Integer>> list= new ArrayList<>();
        Set<List<Integer>> listSet= new HashSet<>();
        Set<Integer> set= new HashSet<>();
        for(int i=0; i<n-1; i++){
            for(int j=i+1; j<n; j++){
                int third= -(nums[i]+nums[j]);
                if(set.contains(third)){
                    List<Integer> l= new ArrayList<>();
                    l.add(nums[i]);
                    l.add(nums[j]);
                    l.add(third);
                    Collections.sort(l);
                    listSet.add(l);
                }
                 set.add(nums[j]);
            }
            set.clear();
        }


        for(List<Integer> l: listSet){
            list.add(l);
        }
        return list;
    }
}
